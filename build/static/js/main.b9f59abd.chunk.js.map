{"version":3,"sources":["components/JournalEntry.js","components/Notification.js","services/journalEntryService.js","App.js","index.js"],"names":["JournalEntry","entry","toggleImportance","label","important","className","date","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newEntry","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","entries","setEntries","setNewEntry","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","journalEntryService","initialEntries","entriesToShow","filter","map","key","find","changedEntry","returnedEntry","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","entryObject","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"2NAceA,EAZM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBACxBC,EAAQF,EAAMG,UACjB,qBAAuB,iBAEzB,OACE,wBAAIC,UAAU,gBACdJ,EAAMK,KADN,KACcL,EAAMM,QACrB,4BAAQC,QAASN,GAAmBC,KCKxBM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OAAgB,OAAZA,EACI,KAIP,yBAAKL,UAAU,SACbK,I,gBCPEC,EAAU,sBAiBD,EAfA,WAEd,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa3B,EAVA,SAAAC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ3B,EALA,SAACG,EAAIF,GAEnB,OADiBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAChCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCXpCK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAgGSC,EA3FH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEgBF,mBAAS,gBAFzB,mBAETV,EAFS,KAECa,EAFD,OAGcH,oBAAS,GAHvB,mBAGTI,EAHS,KAGAC,EAHA,OAIwBL,mBAAS,IAJjC,mBAITM,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGtB,MAAK,SAAAuB,GACJR,EAAWQ,QAEd,IAEH,IAAMC,EAAgBP,EAClBH,EACAA,EAAQW,QAAO,SAAAtC,GAAK,OAAwB,IAApBA,EAAMG,aAmDlC,OACE,6BACE,uCACA,kBAAC,EAAD,CAAcM,QAASuB,IACvB,6BACE,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAtCeO,EAAcE,KAAI,SAAAvC,GAAK,OACxC,kBAAC,EAAD,CACEwC,IAAKxC,EAAMkB,GACXlB,MAAOA,EACPC,iBAAkB,kBAxBK,SAAAiB,GACzB,IAAMlB,EAAQ2B,EAAQc,MAAK,SAAAzC,GAAK,OAAIA,EAAMkB,KAAOA,KAC3CwB,EAAY,eAAQ1C,EAAR,CAAeG,WAAYH,EAAMG,YAEnDgC,EACUjB,EAAIwB,GACX7B,MAAK,SAAA8B,GACJf,EAAWD,EAAQY,KAAI,SAAAvC,GAAK,OAAIA,EAAMkB,KAAOA,EAAKlB,EAAQ2C,SAE3DC,OAAM,SAAAC,GACLZ,EAAgB,kBAAD,OACKjC,EAAMM,QADX,sCAGfwC,YAAW,WACTb,EAAgB,QACf,KACHL,EAAWD,EAAQW,QAAO,SAAAtC,GAAK,OAAIA,EAAMkB,KAAOA,SAQ1B6B,CAAmB/C,EAAMkB,WAqCjD,0BAAM8B,SAjCO,SAACC,GAChBA,EAAMC,iBACN,IAAMC,EAAc,CAClB7C,QAASU,EACTX,MAAM,IAAI+C,MAAOC,cACjBlD,UAAWmD,KAAKC,SAAW,IAI7BpB,EACUgB,GACPtC,MAAK,SAAA8B,GACJf,EAAWD,EAAQ6B,OAAOb,IAC1Bd,EAAY,SAqBZ,2BACE4B,MAAOzC,EACP0C,SAnBkB,SAACT,GACzBpB,EAAYoB,EAAMU,OAAOF,UAoBrB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MCrGNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b9f59abd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst JournalEntry = ({ entry, toggleImportance }) => {\r\n\tconst label = entry.important\r\n\t\t? 'make not important' : 'make important'\r\n\t\t\r\n  return (\r\n    <li className=\"journalEntry\">\r\n\t\t\t{entry.date}: {entry.content}\r\n\t\t\t<button onClick={toggleImportance}>{label}</button>\r\n\t\t</li>\r\n  )\r\n}\r\n\r\nexport default JournalEntry","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n\tif (message === null) {\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"error\">\r\n\t\t\t{message}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/journalEntries'\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(baseUrl)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst create = newEntry => {\r\n\tconst request = axios.post(baseUrl, newEntry)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newEntry) => {\r\n\tconst request =  axios.put(`${baseUrl}/${id}`, newEntry)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n\tgetAll,\r\n\tcreate,\r\n\tupdate\r\n}","import React, { useState, useEffect } from 'react';\nimport JournalEntry from './components/JournalEntry';\nimport Notification from './components/Notification';\nimport journalEntryService from './services/journalEntryService'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [entries, setEntries] = useState([])\n  const [newEntry, setNewEntry] = useState('new entry...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    journalEntryService\n      .getAll()\n      .then(initialEntries => {\n        setEntries(initialEntries)\n      })\n  }, [])\n\n  const entriesToShow = showAll\n    ? entries\n    : entries.filter(entry => entry.important === true)\n\n  const toggleImportanceOf = id => {\n    const entry = entries.find(entry => entry.id === id)\n    const changedEntry = { ...entry, important: !entry.important }\n\n    journalEntryService\n      .update(id, changedEntry)\n      .then(returnedEntry => {\n        setEntries(entries.map(entry => entry.id !== id ? entry : returnedEntry))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Journal entry '${entry.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setEntries(entries.filter(entry => entry.id !== id))\n      })\n  }\n\n  const rows = () => entriesToShow.map(entry =>\n    <JournalEntry\n      key={entry.id}\n      entry={entry}\n      toggleImportance={() => toggleImportanceOf(entry.id)}\n    />\n  )\n\n  const addEntry = (event) => {\n    event.preventDefault()\n    const entryObject = {\n      content: newEntry,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    // Note: there is a diff b/w entryObject and response.data is that id attribute is automatically created in response.data\n    journalEntryService\n      .create(entryObject)\n      .then(returnedEntry => {\n        setEntries(entries.concat(returnedEntry))\n        setNewEntry('')\n      })\n  }\n\n  const handleEntryChange = (event) => {\n    setNewEntry(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Journal</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addEntry}>\n        <input\n          value={newEntry}\n          onChange={handleEntryChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}